#!/usr/bin/env bash

# Cleanup tiedot processes and files
declare -a all_pids
cleanup_files() {
	rm -rf /tmp/tiedot*test*
	rm -rf /tmp/tiedot*bench*
}
cleanup_procs() {
	if [ ${#all_pids[@]} != 0 ]; then
		kill -TERM ${all_pids[*]} > /dev/null 2> /dev/null
		[ $? == 0 ] && sleep 3 && kill -KILL ${all_pids[*]} > /dev/null 2> /dev/null
	fi
}
cleanup() {
	cleanup_procs
	cleanup_files
}
trap cleanup SIGINT SIGTERM SIGHUP

# Full path name of tiedot code and executable
cd `dirname $0`
export CODEBASE=`pwd`
export TIEDOT_EXEC=$CODEBASE/tiedot
cd $CODEBASE

# Run go test cases in the directory
go_test_dir() {
	cleanup_files
	pushd $1
	GOMAXPROCS=4 go test
	if [ $? != 0 ]; then
		cleanup_procs
		exit 1
	fi
	popd
}

# Spawn N server processes at once
declare -a ipc_pids
run_ipc_servers() {
	num_servers=$1
	tmp_dir=$2
	db_dir=$3
	for (( i = 0; i < $num_servers; i++ )); do
		./tiedot -mode=ipc -myrank=$i -totalrank=$num_servers -tmpdir=$tmp_dir -dbdir=$db_dir &
		ipc_pid=$!
		all_pids+=($ipc_pid)
		ipc_pids+=($ipc_pid)
	done
	echo "RPC server PIDs: ${ipc_pids[*]}"
}

# Spawn 4 server processes then run test cases that require IPC connection.
test_network() {
	run_ipc_servers 4 /tmp/tiedot_test_ipc_tmp /tmp/tiedot_test_ipc_db
	go_test_dir 'network'
}

# Spawn 4 server processes, prepare and then run benchmark
declare -a bench_client_pids
benchmark() {
	total_ranks=$1
	tmp_dir=/tmp/tiedot_test_ipc_tmp_bench
	db_dir=/tmp/tiedot_test_ipc_db_bench
	cleanup
	run_ipc_servers $total_ranks $tmp_dir $db_dir
	# Wait for servers to come up, then run benchmark setup
	sleep `echo "2+($total_ranks-1)/3" | bc`
	./tiedot -mode=bench-setup -totalrank $total_ranks -tmpdir=$tmp_dir -dbdir=$db_dir
	sleep `echo "2+($total_ranks-1)/3" | bc`
	# Spawn clients
	for (( i = 0; i < $total_ranks; i++ )); do
		./tiedot -mode=bench-client -myrank=$i -totalrank=$total_ranks -tmpdir=$tmp_dir -dbdir=$db_dir &
		ipc_pid=$!
		all_pids+=($ipc_pid)
		bench_client_pids+=($ipc_pid)
	done
	echo "Benchmark client PIDs: ${bench_client_pids[*]}"
	wait ${bench_client_pids[*]}
}

# Format and compile tiedot
find . -name '*.go' -exec go fmt {} \; || exit $?
go build || exit $?

# Parse mode parameter
MODE=$1

case $MODE in
	'test-data')
		go_test_dir 'data' ;;
	'test-datasvc')
		go_test_dir 'datasvc' ;;
	'test-dbsvc')
		go_test_dir 'dbsvc' ;;
	'test-all')
		for dir in data datasvc dbsvc; do
			go_test_dir $dir
		done ;;
	'bench')
		benchmark $2 ;;
esac

cleanup

