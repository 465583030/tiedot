#!/usr/bin/env bash

# Cleanup tiedot processes and files
declare -a all_pids
cleanup_files() {
	rm -rf /tmp/tiedot*test*
	rm -rf /tmp/tiedot*bench*
}
cleanup_procs() {
	if [ ${#all_pids[@]} != 0 ]; then
		kill -TERM ${all_pids[*]} > /dev/null 2> /dev/null
		[ $? == 0 ] && sleep 3 && kill -KILL ${all_pids[*]} > /dev/null 2> /dev/null
	fi
}
cleanup() {
	echo 'Cleanup'
	cleanup_procs
	cleanup_files
}
trap cleanup_procs SIGINT SIGTERM SIGHUP

# Full path name of tiedot code and executable
cd `dirname $0`
export CODEBASE=`pwd`
export TIEDOT_EXEC=$CODEBASE/tiedot
cd $CODEBASE

# Run go test cases in the directory
go_test_dir() {
	cleanup
	pushd $1
	find . -name '*.go' -exec go fmt {} \; || exit $?
	GOMAXPROCS=4 go test
	if [ $? != 0 ]; then
		popd
		exit 1
	fi
	popd
}

# Spawn 4 server processes, prepare and then run benchmark
declare -a bench_client_pids
benchmark() {
	cleanup
	total_ranks=$1
    [[ -z "$total_ranks" ]] && echo 'Please provide number of servers to be used'
	work_dir=/tmp/tiedot_test_ipc_tmp_bench
	db_dir=/tmp/tiedot_test_ipc_db_bench
	go build || exit $?
	mkdir $db_dir
	mkdir $work_dir
	# Spawn data structure servers
	for (( i=0; i<$total_ranks; i++ )); do
		./tiedot -mode=datasvc -myrank=$i -totalrank=$total_ranks -workdir=$work_dir -dbdir=$db_dir &
		all_pids+=($!)
	done
	# Wait for servers to come up and then run benchmark setup
	sleep 1
	./tiedot -mode=bench-setup -totalrank $total_ranks -workdir=$work_dir -dbdir=$db_dir
	sleep 2
	# Spawn clients
	for (( i=0; i<$total_ranks; i++ )); do
		./tiedot -mode=bench-client -totalrank=$total_ranks -workdir=$work_dir -dbdir=$db_dir -dump-stack-on-interrupt &
		all_pids+=($!)
		bench_client_pids+=($!)
	done
	echo "Benchmark client PIDs: ${bench_client_pids[*]}"
	wait ${bench_client_pids[*]}
	cleanup
}


# Parse mode parameter
MODE=$1

case $MODE in
	'test-data')
		go_test_dir 'data' ;;
	'test-datasvc')
		go_test_dir 'datasvc' ;;
	'test-dbsvc')
		go_test_dir 'dbsvc' ;;
	'test-all')
		for dir in data datasvc dbsvc; do
			go_test_dir $dir
		done ;;
	'bench')
		benchmark $2 ;;
esac

